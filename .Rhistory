runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
all_stocks
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
all_stocks$Name
unique(all_stocks$Name)
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
runApp('stocks_App.R')
# Create a portfolio rebalancing monthly
pf_rebal <- Return.portfolio(R = returns, rebalance_on = "months", weights = eq_weights)
library(readr)
library(readr)
setwd("~/Documents/github/credit_risk_model")
library(readr)
loan_data <- read_csv('train.csv')
loan_data <- read_csv('./data/train.csv')
head(loan_data)
loan_data.columns
columns(loan_data)
names(loan_data)
loan_default <- read_csv('./loan_default_prediction/train_v2.csv')
head(loan_default)
loan_default
loan_data
library(gmodels)
install.packages(gmodels)
install.packages('gmodels'')
install.packages('gmodels')
library(gmodels)
CrossTable(loan_data$SeriousDlqin2yrs)
View(all_stocks)
loan_data <- readRDS('./data/loan_data_ch1.rds')
head(loan_data)
class(loan_data)
head(loan_data)
str(loan_data)
loan_data <- readRDS('./data/loan_data1.rds')
head(loan_data)
str(loan_data)
CrossTable(loan_data$loan_status)
CrossTable(loan_data$grade, loan_data$loan_status)
#create cross table of credit grade vs loan staatus
CrossTable(loan_data$grade, loan_data$loan_status, prop.r = TRUE,
prop.c = FLASE, prop.t = FALSE, prop.chisq = FALSE)
#create cross table of credit grade vs loan staatus
CrossTable(loan_data$grade, loan_data$loan_status, prop.r = TRUE,
prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
CrossTable(loan_data$loan_status)
hist(loan_data$int_rate)
hist(loan_data$int_rate, main = 'Histogram of Interest Rate', xlab = 'Interest rates')
hist(loan_data$int_rate, main = 'Histogram of interest rate', xlab = 'Interest rates')
plot(loan_data$annual_inc, ylab = 'annual income')
write_csv(loan_data, 'loan_data1.csv')
#cleaning outliers 1) use expert suggestion 2) use rule of thump
ind_outliers <- which(loan_data$annual_inc > 3000000)
ind_outliers
#cleaning outliers 1) use expert suggestion
#2) use rule of thump: outlier if bigger or smaller than > Q3 + 1.5*(IQR)
#ind_outliers <- which(loan_data$annual_inc > 3000000)
#loan_data_no_outliers <- loan_data[-ind_outliers,]
cutoff <- quantile(loan_data$annual_inc, 0.75) + 1.5 * IQR(loan_data$annual_inc)
ind_outliers <- which(loan_data$annual_inc > cutoff)
loan_data_no_outliers <- loan_data[-ind_outliers,]
hist(loan_data_no_outliers)
hist(loan_data_no_outliers$annual_inc)
hist(loan_data_no_outliers$annual_inc, sqrt(nrow(loan_data_no_outliers)), xlab = 'annual income')
hist(loan_data_no_outliers$annual_inc, breaks = sqrt(nrow(loan_data_no_outliers)), xlab = 'annual income')
hist(loan_data_no_outliers$annual_inc, xlab = 'annual income')
hist1 <- hist(loan_data_no_outliers$loan_amnt)
hist1$breaks
hist1 <- hist(loan_data_no_outliers$loan_amnt, breaks = 15, xlab = 'loan amount',
main = 'Histogram of loan amount')
hist1 <- hist(loan_data_no_outliers$loan_amnt, breaks = 15, xlab = 'loan amount',
main = 'Histogram of loan amount')
hist1 <- hist(loan_data_no_outliers$loan_amnt, breaks = 100, xlab = 'loan amount',
main = 'Histogram of loan amount')
hist1 <- hist(loan_data_no_outliers$loan_amnt, breaks = 10, xlab = 'loan amount',
main = 'Histogram of loan amount')
hist1 <- hist(loan_data_no_outliers$loan_amnt, breaks = 100, xlab = 'loan amount',
main = 'Histogram of loan amount')
plot(loan_data$age, loan_data$annual_inc, xlab = 'age', ylab = 'annual income')
#remove age outliers
ind_highage <- which(loan_data_no_outliers$age > 120)
#remove age outliers
ind_highage <- which(loan_data_no_outliers$age > 120)
loan_data_no_outliers <- loan_data_no_outliers[-ind_highage,]
names(loan_data)
#remove missing data
summary(loan_data)
loan_data_no_outliers_no_NA <- loan_data_no_outliers[-ind_NA,]
#remove rows that employment length (emp_length) are NAs (don't use this when there are too many NAs)
ind_NA <- which(is.na(loan_data_no_outliers$emp_length))
loan_data_no_outliers_no_NA <- loan_data_no_outliers[-ind_NA,]
loan_data_no_outliers_no_NA <- loan_data_no_outliers[-c(ind_NA),]
#remove the whole column
loan_data_no_outliers_no_emp <- loan_data_no_outliers
loan_data_no_outliers_no_emp$emp_length <- NULL
#replace missing data with median (median imputation)
loan_data_no_outliers_replace <- loan_data_no_outliers
loan_data_no_outliers_replace$emp_length[ind_NA] <- median(loan_data_no_outliers$emp_length, na.rm = TRUE)
#
summary(loan_data_no_outliers$int_rate)
#
summary(loan_data_no_outliers$int_rate)
loan_data_no_outliers
loan_data
loan_data_no_outliers <- loan_data[-ind_outliers,]
#
summary(loan_data_no_outliers$int_rate)
#remove age outliers
ind_highage <- which(loan_data_no_outliers$age > 120)
loan_data_no_outliers <- loan_data_no_outliers[-ind_highage,]
#
summary(loan_data_no_outliers$int_rate)
ind_highage
#remove age outliers
ind_highage <- which(loan_data_no_outliers$age > 120)
ind_highage
loan_data_no_outliers <- loan_data[-ind_outliers,]
loan_data_no_outliers
ind_highage
loan_data_no_outliers <- loan_data_no_outliers[-ind_highage,]
loan_data_no_outliers
loan_data_no_outliers <- loan_data[-ind_outliers,]
ind_outliers
cutoff
#cleaning outliers 1) use expert suggestion
#2) use rule of thump: outlier if bigger or smaller than > Q3 + 1.5*(IQR)
ind_outliers <- which(loan_data$annual_inc > 3000000)
loan_data_no_outliers <- loan_data[-ind_outliers,]
ind_outliers
loan_data[ind_outliers,]
#remove age outliers
ind_highage <- which(loan_data_no_outliers$age > 120)
ind_highage
loan_data_no_outliers
loan_data_no_outliers <- loan_data_no_outliers[-ind_highage,]
loan_data_no_outliers
loan_data_no_outliers <- loan_data[-ind_outliers,]
loan_data_no_outliers_no_NA <- loan_data_no_outliers[-c(ind_NA),]
#remove the whole column
loan_data_no_outliers_no_emp <- loan_data_no_outliers
source('~/Documents/github/credit_risk_model/credit_risk_model.R')
#
summary(loan_data_no_outliers$int_rate)
loan_data_no_outliers
nrow(loan_data_no_outliers)
summary(loan_data_no_outliers)
library(readr)
library(gmodels)
loan_data <- readRDS('./data/loan_data1.rds')
write_csv(loan_data, 'loan_data1.csv')
head(loan_data)
str(loan_data)
names(loan_data) #see coumn names
#comparing non-default and default loan (0 = non-default, 1 = default)
CrossTable(loan_data$loan_status)
#create cross table of credit grade vs loan status
CrossTable(loan_data$grade, loan_data$loan_status, prop.r = TRUE,
prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
#histogram plot of interest rate
hist(loan_data$int_rate, main = 'Histogram of interest rate', xlab = 'Interest rates')
#plots of annual income
plot(loan_data$annual_inc, ylab = 'annual income') #show an outlier at about 3 million dollars
#cleaning outliers 1) use expert suggestion
#2) use rule of thump: outlier if bigger or smaller than > Q3 + 1.5*(IQR)
ind_outliers <- which(loan_data$annual_inc > 3000000)
loan_data_no_outliers <- loan_data[-ind_outliers,]
#remove missing data
summary(loan_data_no_outliers)
#remove rows that employment length (emp_length) are NAs (don't use this when there are too many NAs)
ind_NA <- which(is.na(loan_data_no_outliers$emp_length))
loan_data_no_outliers_no_NA <- loan_data_no_outliers[-c(ind_NA),]
ind_NA <- which(is.na(loan_data_no_outliers$emp_length))
ind_NA_int <- which(is.na(loan_data_no_outliers$int_rate))
length(ind_NA)
length(ind_NA_int)
loan_data_no_outliers_no_NA <- loan_data_no_outliers[-c(ind_NA, ind_NA_int),]
summary(loan_data_no_outliers_no_NA )
nrow(loan_data_no_outliers_no_NA)
#split data to training set and test set
set.seed(49)
ind_train <- sample(1:nrow(loan_data_no_outliers_no_NA), 2/3 * nrow(loan_data_no_outliers_no_NA))
ind_train
training_set <- loan_data_no_outliers_no_NA[ind_train,]
test_set <- loan_data_no_outliers_no_NA[-ind_train,]
#logistic regression
log_model <- glm(loan_status ~ int_rate, family = 'binomial', data = training_set)
log_model
#keep missing data: coarse classification
loan_data_no_outliers$ir_cat <-  rep(NA, nrow(loan_data_no_outliers$int_rate))
#keep missing data: coarse classification
loan_data_no_outliers$ir_cat <-  rep(NA, length(loan_data_no_outliers$int_rate))
loan_data_no_outliers$ir_cat[which(loan_data_no_outliers$int_rate > 8 &
loan_data_no_outliers$int_rate <= 11)] <- '8-11'
loan_data_no_outliers$ir_cat[which(loan_data_no_outliers$int_rate > 11 &
loan_data_no_outliers$int_rate <= 13.5)] <- '11-13.5'
loan_data_no_outliers$ir_cat[which(loan_data_no_outliers$int_rate > 13.5)] <- '13.5+'
loan_data_no_outliers$ir_cat[which(is.na(loan_data_no_outliers$int_rate))] <- 'missing'
summary(loan_data_no_outliers)
summary(loan_data_no_outliers$ir_cat)
table(loan_data_no_outliers$ir_cat)
loan_data_no_outliers$ir_cat[which(loan_data_no_outliers$int_rate <= 8)] <- '0-8'
table(loan_data_no_outliers$ir_cat)
#
summary(loan_data_no_outliers$ir_cat)
#logistic regression
log_model <- glm(loan_status ~ ir_cat, family = 'binomial', data = training_set)
set.seed(49)
ind_train <- sample(1:nrow(loan_data_no_outliers), 2/3 * nrow(loan_data_no_outliers))
training_set <- loan_data_no_outliers[ind_train,]
test_set <- loan_data_no_outliers[-ind_train,]
#logistic regression
log_model <- glm(loan_status ~ ir_cat, family = 'binomial', data = training_set)
log_model
#logistic regression
log_model_ir_cat <- glm(loan_status ~ ir_cat, family = 'binomial', data = training_set)
#logistic regression
log_model_ir_cat <- glm(loan_status ~ ir_cat, family = 'binomial', data = training_set)
log_model_ir_cat
exp(0.6637)
str(training_set)
loan_data_no_outliers$ir_cat <- as.factor(loan_data_no_outliers$ir_cat)
plot(loan_data_no_outliers$ir_cat)
set.seed(49)
ind_train <- sample(1:nrow(loan_data_no_outliers), 2/3 * nrow(loan_data_no_outliers))
training_set <- loan_data_no_outliers[ind_train,]
test_set <- loan_data_no_outliers[-ind_train,]
#logistic regression
log_model_ir_cat <- glm(loan_status ~ ir_cat, family = 'binomial', data = training_set)
log_model_ir_cat
str(training_set)
#multiple logistic regression
log_model_multi <- glm(loan_status ~ age + ir_cat + grade + loan_amnt + annual_inc,
family = 'binomial', data = training_set)
summary(log_model_multi)
#predicting one case
test_case <- as.data.frame(test_set[1,])
test_case
#P value: mild significant(.), strong significant(***)
log_model_age_homeowner <- glm(loan_status ~ age + home_ownership,
family='binomial', data=training_set)
predict_test <- predict(log_model_age_homeowner, newdata = test_case,
type='response') #return probability
predict_test
#predict all test set
predict_test_set <- predict(log_model_age_homeowner, newdata = test_set, type = 'response')
range(predict_test_set)
str(loan_data_no_outliers)
loan_data_no_outliers$emp_cat <-  rep(NA, length(loan_data_no_outliers$emp_length))
loan_data_no_outliers$emp_cat[which(loan_data_no_outliers$emp_length <= 15)] <- '0-15'
loan_data_no_outliers$emp_cat[which(loan_data_no_outliers$emp_length > 15 &
loan_data_no_outliers$emp_length <= 30)] <- '15-30'
loan_data_no_outliers$emp_cat[which(loan_data_no_outliers$emp_length > 30 &
loan_data_no_outliers$emp_length <= 45)] <- '30-45'
loan_data_no_outliers$emp_cat[which(loan_data_no_outliers$emp_length > 45)] <- '45+'
loan_data_no_outliers$emp_cat[which(is.na(loan_data_no_outliers$emp_length))] <- 'Missing'
loan_data_no_outliers$emp_cat <- as.factor(loan_data_no_outliers$emp_cat)
plot(loan_data_no_outliers$emp_cat)
table(loan_data_no_outliers$emp_cat)
#split data to training set and test set
set.seed(49)
ind_train <- sample(1:nrow(loan_data_no_outliers), 2/3 * nrow(loan_data_no_outliers))
training_set <- loan_data_no_outliers[ind_train,]
test_set <- loan_data_no_outliers[-ind_train,]
str(training_set)
loan_data_no_outliers$int_rate <- NULL
loan_data_no_outliers$emp_length <- NULL
set.seed(49)
ind_train <- sample(1:nrow(loan_data_no_outliers), 2/3 * nrow(loan_data_no_outliers))
training_set <- loan_data_no_outliers[ind_train,]
test_set <- loan_data_no_outliers[-ind_train,]
str(training_set)
#logistic regression with all variables
log_model_full <- glm(loan_status ~ ., family='binomial', data = training_set)
predict_full <- predict(log_model_full, newdata = test_set, type = 'response')
range(predict_full)
range(predict_full)
##Model evaluation: set cut off or treshold value
# Make a binary predictions-vector using a cut-off of 15%
pred_cutoff_15 <- ifelse(predict_full > 0.15, 1, 0)
pred_cutoff_15
# Construct a confusion matrix
table(test_set$loan_status, pred_cutoff_15)
# Construct a confusion matrix
conf_mat__cutoff_15 <- table(test_set$loan_status, pred_cutoff_15)
conf_mat__cutoff_15
conf_mat__cutoff_15[1]
conf_mat__cutoff_15[1,1]
conf_mat__cutoff_15[1,2]
conf_mat__cutoff_15[2,2]
diag(conf_mat__cutoff_15)
sum(conf_mat__cutoff_15)
accuracy_cutoff_15 <- sum(diag(conf_mat__cutoff_15))/sum(conf_mat__cutoff_15)
accuracy_cutoff_15
conf_mat__cutoff_15
conf_mat__cutoff_15[,2]
conf_mat__cutoff_15[2,]
sensitivity_cutoff_15 <- conf_mat__cutoff_15[2,2]/sum(conf_mat__cutoff_15[2,])
sensitivity_cutoff_15
specificity <- conf_mat__cutoff_15[1,2]/sum(conf_mat__cutoff_15[1,])
specificity
sensitivity_cutoff_15
conf_mat__cutoff_15
conf_mat__cutoff_15[1,2]
specificity_cutoff_15 <- conf_mat__cutoff_15[1,1]/sum(conf_mat__cutoff_15[1,])
specificity_cutoff_15
print(paste('specificity_cutoff_15 = ', specificity_cutoff_15))
print(paste(c('specificity_cutoff_15 = ', specificity_cutoff_15))
print(paste(c('specificity_cutoff_15 = ', specificity_cutoff_15)))
print(paste('specificity_cutoff_15 = ', specificity_cutoff_15))
print(paste('accuracy_cutoff_15 = ', accuracy_cutoff_15))
print(paste('sensitivity_cutoff_15 = ', sensitivity_cutoff_15))
pred_cutoff_20 <- ifelse(predict_full > 0.2, 1, 0)
# Construct a confusion matrix
conf_mat_cutoff_20 <- table(test_set$loan_status, pred_cutoff_20)
accuracy_cutoff_20 <- sum(diag(conf_mat_cutoff_20))/sum(conf_mat_cutoff_20)
sensitivity_cutoff_20 <- conf_mat_cutoff_20[2,2]/sum(conf_mat_cutoff_20[2,])
specificity_cutoff_20 <- conf_mat_cutoff_20[1,1]/sum(conf_mat_cutoff_20[1,])
print(paste('accuracy_cutoff_20 = ', accuracy_cutoff_20))
print(paste('sensitivity_cutoff_20 = ', sensitivity_cutoff_20))
print(paste('specificity_cutoff_20 = ', specificity_cutoff_20))
names(training_set)
save(loan_data_no_outliers, log_model_full, file = 'data_and_log_model.RData')
save(loan_data_no_outliers, log_model_full, file = './data/data_and_log_model.RData')
#
load('./data/data_and_log_model.RData')
save(loan_data_no_outliers, file = './data/loan_data_no_outliers.RData')
load('./data/loan_data_no_outliers.RData')
names(training_set)
log_model<- glm(loan_status ~ age + annual_inc, family='binomial', data = loan_data_no_outliers)
library(shiny)
library(ggplot2)
library(dplyr)
library(readr)
log_model<- glm(loan_status ~ age + annual_inc, family='binomial', data = loan_data_no_outliers)
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('~/Documents/github/sandp500_stocks_visuallization_with_RShiny/stocks_App.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
a=33
i=80000
test = as.data.frame(a,i)
test = as.data.frame(c(a,i)
)
test
newdata <- as.data.frame(age=33, annual_inc = 80000)
newdata <- data.frame(age=33, annual_inc = 80000)
newdata
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
predict(log_model, newdata = newdata, type = 'response')
p<-predict(log_model, newdata = newdata, type = 'response')
class(p)
runApp('credit_risk_log_model_Shiny.R')
str(p)
str(1)
runApp('credit_risk_log_model_Shiny.R')
as.character(p)
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
names(loan_data_no_outliers)
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
loan_data_no_outliers
hist(loan_data_no_outliers[,annual_inc], main="", xlab="annual_inc")
names(loan_data_no_outliers)
hist(loan_data_no_outliers[,'annual_inc'], main="", xlab="annual_inc")
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
names(loan_data_no_outliers)
plot(loan_data_no_outliers[,'grade'])
plot(loan_data_no_outliers[,'loan_status'])
plot(loan_data_no_outliers[,'loan_amnt'])
plot(loan_data_no_outliers[,'home_ownership'])
plot(loan_data_no_outliers[,'age'])
plot(loan_data_no_outliers[,'ir_cat'])
plot(loan_data_no_outliers[,'emp_cat'])
hist(loan_data_no_outliers[,'loan_amnt'])
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
runApp('credit_risk_log_model_Shiny.R')
which(loan_data_no_outliers$annual_inc > 1000000)
which(loan_data_no_outliers$annual_inc > 3000000)
log_model<- glm(loan_status ~ age + annual_inc, family='binomial', data = loan_data_no_outliers)
newdata <- as.data.frame(age=input$borrower_age, annual_inc = input$borrower_annual_income)
### Test in regular R command
newdata <- as.data.frame(age=33, annual_inc = 100000)
newdata <- as.data.frame(age=33, annual_inc = 100000)
newdata <- as.data.frame('age'=33, 'annual_inc' = 100000)
newdata <- data.frame('age'=33, 'annual_inc' = 100000)
newdata
p <- predict(log_model, newdata = newdata, type = 'response')
p
summarise(p)
p_cutoff_15 <- ifelse(p > 0.15, 1, 0)
print(p_cutoff_15)
p_cutoff_15 <- ifelse(p > 0.15, 'Default', 'Non default')
print(p_cutoff_15)
approval <- ifelse(p > 0.15, 'Not approved', 'Approved')
print(approval)
names(loan_data_no_outliers)
summary(loan_data_no_outliers)
log_model<- glm(loan_status ~ age + annual_inc + loan_amnt + grade + home_ownership + emp_cat,
family='binomial', data = loan_data_no_outliers)
newdata
log_model<- glm(loan_status ~ age + annual_inc + loan_amnt + grade + home_ownership + emp_cat,
family='binomial', data = loan_data_no_outliers)
newdata <- data.frame('age'=33,
'annual_inc' = 100000,
'loan_amnt' = 200000,
'grade' = 'G',
'home_ownership' = 'RENT',
'emp_cat' = 5)
p <- predict(log_model, newdata = newdata, type = 'response')
# Make a binary predictions-vector using a cut-off of 15%
p_cutoff_15 <- ifelse(p > 0.15, 1, 0)
p_cutoff_15 <- ifelse(p > 0.15, 'Default', 'Non default')
approval <- ifelse(p > 0.15, 'Not approved', 'Approved')
print(p_cutoff_15)
print(approval)
factor(5)
plot(loan_data_no_outliers$emp_cat)
newdata <- data.frame('age'=33,
'annual_inc' = 100000,
'loan_amnt' = 200000,
'grade' = 'G',
'home_ownership' = 'RENT',
'emp_cat' = '0-15')
p <- predict(log_model, newdata = newdata, type = 'response')
# Make a binary predictions-vector using a cut-off of 15%
p_cutoff_15 <- ifelse(p > 0.15, 1, 0)
p_cutoff_15 <- ifelse(p > 0.15, 'Default', 'Non default')
approval <- ifelse(p > 0.15, 'Not approved', 'Approved')
print(p_cutoff_15)
print(approval)
input$borrower_age
plot(loan_data_no_outliers[,input$indepvar2],
main="Plot of independent variable", xlab=input$indepvar2)
shinyApp(ui = ui, server = server)
source('~/Documents/github/credit_risk_model/credit_risk_log_model_Shiny.R')
log_model<- glm(loan_status ~ age + annual_inc, family='binomial', data = loan_data_no_outliers)
library(shiny)
library(ggplot2)
library(dplyr)
library(readr)
#
library(shiny)
source('~/Documents/github/credit_risk_model/credit_risk_log_model_Shiny.R')
